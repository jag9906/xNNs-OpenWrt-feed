/*
 *
 * Tiny
 *
 *   http://www.squaregear.net/fonts/tiny.shtml
 *
 * Copyright (C) 2004 by Matthew Welch
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this font software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 * Converted with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Tiny.h
 * Date                : 10.07.2011
 * Font size in bytes  : 1512
 * Font width          : 10
 * Font height         : 5
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>

#ifndef TINY_H
#define TINY_H

#define TINY_WIDTH 10
#define TINY_HEIGHT 5

static uint8_t Tiny[] = {
    0x05, 0xE8, // size
    0x0A, // width
    0x05, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x00, 0x01, 0x03, 0x05, 0x03, 0x04, 0x04, 0x01, 0x02, 0x02, 
    0x03, 0x03, 0x01, 0x03, 0x01, 0x04, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x04, 0x03, 0x05, 0x04, 0x04, 0x03, 0x04, 
    0x03, 0x03, 0x03, 0x04, 0x05, 0x05, 0x03, 0x05, 0x04, 0x02, 
    0x04, 0x02, 0x03, 0x03, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x02, 0x02, 0x03, 0x01, 0x01, 0x03, 0x01, 0x05, 0x03, 0x03, 
    0x03, 0x03, 0x02, 0x03, 0x03, 0x03, 0x03, 0x05, 0x03, 0x03, 
    0x03, 0x03, 0x01, 0x03, 0x04, 0x03, 
    
    // font data
    0x58, // 33
    0x18, 0x00, 0x18, // 34
    0x50, 0xF8, 0x50, 0xF8, 0x50, // 35
    0x50, 0xF8, 0x50, // 36
    0x48, 0x20, 0x10, 0x48, // 37
    0x20, 0x58, 0x48, 0x20, // 38
    0x18, // 39
    0x70, 0x88, // 40
    0x88, 0x70, // 41
    0x28, 0x10, 0x28, // 42
    0x20, 0x70, 0x20, // 43
    0xC0, // 44
    0x20, 0x20, 0x20, // 45
    0x40, // 46
    0x40, 0x20, 0x10, 0x08, // 47
    0x30, 0x48, 0x30, // 48
    0x50, 0x78, 0x40, // 49
    0x68, 0x48, 0x50, // 50
    0x48, 0x58, 0x30, // 51
    0x30, 0x20, 0x78, // 52
    0x58, 0x48, 0x28, // 53
    0x70, 0x68, 0x68, // 54
    0x48, 0x28, 0x18, // 55
    0x30, 0x58, 0x30, // 56
    0x30, 0x28, 0x78, // 57
    0x50, // 58
    0xD0, // 59
    0x20, 0x50, 0x88, // 60
    0x50, 0x50, 0x50, // 61
    0x88, 0x50, 0x20, // 62
    0x08, 0x48, 0x10, // 63
    0x30, 0x48, 0x58, // 64
    0x70, 0x28, 0x70, // 65
    0x78, 0x58, 0x30, // 66
    0x30, 0x48, 0x48, // 67
    0x78, 0x48, 0x30, // 68
    0x78, 0x58, 0x48, // 69
    0x78, 0x28, 0x08, // 70
    0x30, 0x48, 0x68, // 71
    0x78, 0x20, 0x78, // 72
    0x48, 0x78, 0x48, // 73
    0x20, 0x40, 0x38, // 74
    0x78, 0x20, 0x30, 0x48, // 75
    0x78, 0x40, 0x40, // 76
    0x78, 0x10, 0x20, 0x10, 0x78, // 77
    0x78, 0x10, 0x20, 0x78, // 78
    0x30, 0x48, 0x48, 0x30, // 79
    0x78, 0x28, 0x10, // 80
    0x30, 0x48, 0xC8, 0x30, // 81
    0x78, 0x28, 0x50, // 82
    0x50, 0x48, 0x28, // 83
    0x08, 0x78, 0x08, // 84
    0x38, 0x40, 0x40, 0x38, // 85
    0x18, 0x20, 0x40, 0x20, 0x18, // 86
    0x38, 0x40, 0x30, 0x40, 0x38, // 87
    0x68, 0x10, 0x68, // 88
    0x08, 0x10, 0x60, 0x10, 0x08, // 89
    0x48, 0x68, 0x58, 0x48, // 90
    0xF8, 0x88, // 91
    0x08, 0x10, 0x20, 0x40, // 92
    0x88, 0xF8, // 93
    0x10, 0x08, 0x10, // 94
    0x80, 0x80, 0x80, // 95
    0x08, 0x10, // 96
    0x20, 0x50, 0x70, // 97
    0x78, 0x50, 0x20, // 98
    0x20, 0x50, 0x50, // 99
    0x20, 0x50, 0x78, // 100
    0x20, 0x70, 0x50, // 101
    0x70, 0x28, // 102
    0xB0, 0xF0, // 103
    0x78, 0x10, 0x60, // 104
    0x68, // 105
    0xE8, // 106
    0x78, 0x20, 0x50, // 107
    0x78, // 108
    0x70, 0x10, 0x60, 0x10, 0x60, // 109
    0x70, 0x10, 0x60, // 110
    0x20, 0x50, 0x20, // 111
    0xF0, 0x50, 0x20, // 112
    0x20, 0x50, 0xF0, // 113
    0x70, 0x10, // 114
    0x40, 0x70, 0x10, // 115
    0x10, 0x78, 0x10, // 116
    0x30, 0x40, 0x70, // 117
    0x30, 0x40, 0x30, // 118
    0x30, 0x40, 0x20, 0x40, 0x30, // 119
    0x50, 0x20, 0x50, // 120
    0xB0, 0xA0, 0x70, // 121
    0x50, 0x70, 0x50, // 122
    0x20, 0xF8, 0x88, // 123
    0xF8, // 124
    0x88, 0xF8, 0x20, // 125
    0x10, 0x08, 0x10, 0x08, // 126
    0x40, 0x30, 0x08 // 127
    
};

#endif
